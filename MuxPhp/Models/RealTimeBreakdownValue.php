<?php

/**
 * Mux PHP - Copyright 2019 Mux Inc.
 * NOTE: This file is auto generated. Do not edit this file manually.
 */

namespace MuxPhp\Models;

use \ArrayAccess;
use \MuxPhp\ObjectSerializer;

/**
 * RealTimeBreakdownValue Class Doc Comment
 *
 * @category Class
 * @package  MuxPhp
 */
class RealTimeBreakdownValue implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'RealTimeBreakdownValue';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'value' => 'string',
        'negative_impact' => 'int',
        'metric_value' => 'double',
        'display_value' => 'string',
        'concurent_viewers' => 'int'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPIFormats = [
        'value' => null,
        'negative_impact' => 'int64',
        'metric_value' => 'double',
        'display_value' => null,
        'concurent_viewers' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'value' => 'value',
        'negative_impact' => 'negative_impact',
        'metric_value' => 'metric_value',
        'display_value' => 'display_value',
        'concurent_viewers' => 'concurent_viewers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'value' => 'setValue',
        'negative_impact' => 'setNegativeImpact',
        'metric_value' => 'setMetricValue',
        'display_value' => 'setDisplayValue',
        'concurent_viewers' => 'setConcurentViewers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'value' => 'getValue',
        'negative_impact' => 'getNegativeImpact',
        'metric_value' => 'getMetricValue',
        'display_value' => 'getDisplayValue',
        'concurent_viewers' => 'getConcurentViewers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['negative_impact'] = isset($data['negative_impact']) ? $data['negative_impact'] : null;
        $this->container['metric_value'] = isset($data['metric_value']) ? $data['metric_value'] : null;
        $this->container['display_value'] = isset($data['display_value']) ? $data['display_value'] : null;
        $this->container['concurent_viewers'] = isset($data['concurent_viewers']) ? $data['concurent_viewers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets negative_impact
     *
     * @return int|null
     */
    public function getNegativeImpact()
    {
        return $this->container['negative_impact'];
    }

    /**
     * Sets negative_impact
     *
     * @param int|null $negative_impact negative_impact
     *
     * @return $this
     */
    public function setNegativeImpact($negative_impact)
    {
        $this->container['negative_impact'] = $negative_impact;

        return $this;
    }

    /**
     * Gets metric_value
     *
     * @return double|null
     */
    public function getMetricValue()
    {
        return $this->container['metric_value'];
    }

    /**
     * Sets metric_value
     *
     * @param double|null $metric_value metric_value
     *
     * @return $this
     */
    public function setMetricValue($metric_value)
    {
        $this->container['metric_value'] = $metric_value;

        return $this;
    }

    /**
     * Gets display_value
     *
     * @return string|null
     */
    public function getDisplayValue()
    {
        return $this->container['display_value'];
    }

    /**
     * Sets display_value
     *
     * @param string|null $display_value display_value
     *
     * @return $this
     */
    public function setDisplayValue($display_value)
    {
        $this->container['display_value'] = $display_value;

        return $this;
    }

    /**
     * Gets concurent_viewers
     *
     * @return int|null
     */
    public function getConcurentViewers()
    {
        return $this->container['concurent_viewers'];
    }

    /**
     * Sets concurent_viewers
     *
     * @param int|null $concurent_viewers concurent_viewers
     *
     * @return $this
     */
    public function setConcurentViewers($concurent_viewers)
    {
        $this->container['concurent_viewers'] = $concurent_viewers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


