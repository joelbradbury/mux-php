<?php

/**
 * Mux PHP - Copyright 2019 Mux Inc.
 * NOTE: This file is auto generated. Do not edit this file manually.
 */

namespace MuxPhp\Models;

use \ArrayAccess;
use \MuxPhp\ObjectSerializer;

/**
 * RealTimeHistogramTimeseriesDatapoint Class Doc Comment
 *
 * @category Class
 * @package  MuxPhp
 */
class RealTimeHistogramTimeseriesDatapoint implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'RealTimeHistogramTimeseriesDatapoint';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'timestamp' => 'string',
        'sum' => 'int',
        'p95' => 'double',
        'median' => 'double',
        'max_percentage' => 'double',
        'bucket_values' => '\MuxPhp\Models\RealTimeHistogramTimeseriesBucketValues[]',
        'average' => 'double'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPIFormats = [
        'timestamp' => null,
        'sum' => 'int64',
        'p95' => 'double',
        'median' => 'double',
        'max_percentage' => 'double',
        'bucket_values' => null,
        'average' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timestamp' => 'timestamp',
        'sum' => 'sum',
        'p95' => 'p95',
        'median' => 'median',
        'max_percentage' => 'max_percentage',
        'bucket_values' => 'bucket_values',
        'average' => 'average'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timestamp' => 'setTimestamp',
        'sum' => 'setSum',
        'p95' => 'setP95',
        'median' => 'setMedian',
        'max_percentage' => 'setMaxPercentage',
        'bucket_values' => 'setBucketValues',
        'average' => 'setAverage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timestamp' => 'getTimestamp',
        'sum' => 'getSum',
        'p95' => 'getP95',
        'median' => 'getMedian',
        'max_percentage' => 'getMaxPercentage',
        'bucket_values' => 'getBucketValues',
        'average' => 'getAverage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['sum'] = isset($data['sum']) ? $data['sum'] : null;
        $this->container['p95'] = isset($data['p95']) ? $data['p95'] : null;
        $this->container['median'] = isset($data['median']) ? $data['median'] : null;
        $this->container['max_percentage'] = isset($data['max_percentage']) ? $data['max_percentage'] : null;
        $this->container['bucket_values'] = isset($data['bucket_values']) ? $data['bucket_values'] : null;
        $this->container['average'] = isset($data['average']) ? $data['average'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timestamp
     *
     * @return string|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string|null $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets sum
     *
     * @return int|null
     */
    public function getSum()
    {
        return $this->container['sum'];
    }

    /**
     * Sets sum
     *
     * @param int|null $sum sum
     *
     * @return $this
     */
    public function setSum($sum)
    {
        $this->container['sum'] = $sum;

        return $this;
    }

    /**
     * Gets p95
     *
     * @return double|null
     */
    public function getP95()
    {
        return $this->container['p95'];
    }

    /**
     * Sets p95
     *
     * @param double|null $p95 p95
     *
     * @return $this
     */
    public function setP95($p95)
    {
        $this->container['p95'] = $p95;

        return $this;
    }

    /**
     * Gets median
     *
     * @return double|null
     */
    public function getMedian()
    {
        return $this->container['median'];
    }

    /**
     * Sets median
     *
     * @param double|null $median median
     *
     * @return $this
     */
    public function setMedian($median)
    {
        $this->container['median'] = $median;

        return $this;
    }

    /**
     * Gets max_percentage
     *
     * @return double|null
     */
    public function getMaxPercentage()
    {
        return $this->container['max_percentage'];
    }

    /**
     * Sets max_percentage
     *
     * @param double|null $max_percentage max_percentage
     *
     * @return $this
     */
    public function setMaxPercentage($max_percentage)
    {
        $this->container['max_percentage'] = $max_percentage;

        return $this;
    }

    /**
     * Gets bucket_values
     *
     * @return \MuxPhp\Models\RealTimeHistogramTimeseriesBucketValues[]|null
     */
    public function getBucketValues()
    {
        return $this->container['bucket_values'];
    }

    /**
     * Sets bucket_values
     *
     * @param \MuxPhp\Models\RealTimeHistogramTimeseriesBucketValues[]|null $bucket_values bucket_values
     *
     * @return $this
     */
    public function setBucketValues($bucket_values)
    {
        $this->container['bucket_values'] = $bucket_values;

        return $this;
    }

    /**
     * Gets average
     *
     * @return double|null
     */
    public function getAverage()
    {
        return $this->container['average'];
    }

    /**
     * Sets average
     *
     * @param double|null $average average
     *
     * @return $this
     */
    public function setAverage($average)
    {
        $this->container['average'] = $average;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


